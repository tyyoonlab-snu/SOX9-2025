%% Image analysis for SOX9-eGFP condensate
% This script performs automated image analysis of SOX9-eGFP condensate
% captured in confocal microscopy TIFF images. The pipeline includes:
% 1. Batch loading of TIFF images from a selected directory.
% 2. Condensate detection and quantification using a custom analyzer function.
% 3. Extraction of shape and intensity metrics (area, perimeter, circularity, intensity).
% 4. Saving of per-image analysis as individual .mat files.
% 5. Summarization of selected conditions into a tab-delimited .txt table.
%
% Generated by Tae-Gyun Kim

%% Set path & File Search
addpath(cd)                               % Add current directory to path
fold_path = uigetdir;                     % Select folder via UI
cd(fold_path);                            % Change to selected directory

%% File search for TIFF images
f_info = dir('*.tif');                    % Search for .tif files
fname_list = {f_info.name};              % Store file names

%% Parameter setting
circle_radius = 350;                      % Radius of analysis circle
windowSize = 750;                         % Window size for analysis
threshold_factor = 300;                   % Threshold scaling factor
file_numbers = numel(fname_list);         % Number of image files

k = 1;
for i = 1:file_numbers
    % Analyze each image using custom analyzer function
    [num_cond, size_cond, peri_cond, circ_cond, avg_int_cond, sum_int_cond] = ...
        extract_condensate_features(fname_list{i}, circle_radius, windowSize, threshold_factor);

    % Store results in a struct
    dat = struct('number', num_cond, 'size', size_cond, 'avg_int', avg_int_cond, ...
                 'sum_int', sum_int_cond, 'perimeter', peri_cond, 'circularity', circ_cond);

    % Save results to .mat file
    fname_selc = erase(fname_list{i}, '.tif');
    time = datestr(now, 'yyyymmddHHMMSS');
    save_name = ['result-', fname_selc, '_', time, '_', num2str(k), '.mat'];
    save(save_name, 'dat');
    k = k + 1;
end

%% Data Summary (Call Function)
save_name_write = 'summarized result';  % Output filename prefix for summarized results
analyzed_num = {'condition_name'};  % List of experimental conditions to include in summary
quantify_summary(analyzed_num, save_name_write);


%% Function for summarizing .mat data and saving summary table
function quantify_summary(analyzed_num, save_name_write)
    f_info = dir('*.mat');
    sname_list = {f_info.name};
    A_names = strcat('result-', analyzed_num);
    sname_list_for_summarized = {};

    final_sum_int_collection = [];
    final_sum_area_collection = [];
    final_average_circs_collection = [];

    for i = 1:numel(A_names)
        k_index = find(contains(sname_list, A_names{i}));

        sum_int_collection = [];
        average_circs_collection = [];
        sum_area_collection = [];

        for j = k_index
            sname_temp = sname_list{j};
            temp = load(sname_temp);
            temp = temp.dat;

            sum_int_collection = [sum_int_collection, sum(temp.sum_int(:))];
            sum_area_collection = [sum_area_collection, sum(temp.size(:))];
            average_circs_collection = [average_circs_collection, mean(temp.circularity(:))];

            sname_list_for_summarized{end+1} = sname_temp;
        end

        final_sum_int_collection = [final_sum_int_collection, sum_int_collection];
        final_sum_area_collection = [final_sum_area_collection, sum_area_collection];
        final_average_circs_collection = [final_average_circs_collection, average_circs_collection];
    end

    % Save summarized data as table
    summary_table = table(sname_list_for_summarized.', final_sum_int_collection.', ...
                          final_sum_area_collection.', final_average_circs_collection.', ...
                          'VariableNames', {'Fname', 'Sum_int', 'Sum_area', 'Circularity'});

    summarized_save_name = [save_name_write, '_summarized.txt'];
    writetable(summary_table, summarized_save_name, 'Delimiter', 'tab');
end
